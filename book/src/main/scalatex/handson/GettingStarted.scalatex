@import book.BookData._

@p
  To get started with Scala.js, you will need to prepare a few things:

@ul
  @li
    @lnk.misc.sbt: sbt is the most common build tool in the Scala community (although others like @lnk.misc.Mill are growing in popularity as well), and is what we will use for building our Scala.js application. Their home page has a link to download and install it.
  @li
    @lnk.misc.Nodejs: a plaform to run JavaScript code on the command line, without browser. Scala.js uses Node.js to run your code by default.
  @li
    An editor for Scala: @lnk("IntelliJ Scala", "https://blog.jetbrains.com/scala/") and @lnk("VSCode with Metals", "https://scalameta.org/metals/docs/editors/vscode.html") are the most popular choices and work on all platforms, though there are others.
  @li
    @lnk("Git", "https://git-scm.com/"): This is a version-control system that we will use to download and manage our Scala.js projects.
  @li
    A terminal: on OSX you have @lnk("Terminal.app", "https://guides.macrumors.com/Terminal") already installed, in Linux you have @lnk("Terminal", "https://help.ubuntu.com/community/UsingTheTerminal"), and on Windows you have @lnk("PowerShell", "https://en.wikipedia.org/wiki/Windows_PowerShell").
  @li
    Your favorite web browser: @lnk("Chrome", "https://www.google.com/chrome") and @lnk("Firefox", "https://www.mozilla.org/en-US/firefox") are the most popular.

@p
  If you've worked with Scala before, you probably already have most of these installed. Otherwise, take a moment to download them before we get to work.

@p
  The quickest way to get started with Scala.js is to @code{git clone} @lnk("workbench-example-app", "https://github.com/lihaoyi/workbench-example-app"), go into the repository root, and run @code{sbt ~fastOptJS}

@hl.sh
  $ git clone https://github.com/lihaoyi/workbench-example-app
  $ cd workbench-example-app
  $ sbt
  > ~fastOptJS

@p
  Note that the last command is executed within the sbt shell, which is launched by the @hl.sh("sbt") executable.

@p
  This should result in a bunch of spam to the console, and may take a few minutes the first time as SBT resolves and downloads all necessary dependencies. A successful run looks like this

@pre
  $ git clone https://github.com/lihaoyi/workbench-example-app
  Cloning into 'workbench-example-app'...
  remote: Counting objects: 876, done.
  remote: Total 876 (delta 0), reused 0 (delta 0)
  Receiving objects: 100% (876/876), 676.59 KiB | 317.00 KiB/s, done.
  Resolving deltas: 100% (308/308), done.
  Checking connectivity... done.
  $ cd workbench-example-app/
  $ sbt
  [info] Loading global plugins from .../.sbt/1.0/plugins
  [info] Loading settings for project workbench-example-app-build from build.sbt,metals.sbt ...
  [info] Loading project definition from .../workbench-example-app/project
  [info] Loading settings for project workbench-example-app from build.sbt ...
  [info] Set current project to Example (in build file:/.../workbench-example-app/)
  [info] sbt server started at local:sbt-server-44fa36df5e68302f421e
  sbt:Example> ~fastOptJS
  [info] Compiling 1 Scala source to .../workbench-example-app/arget/scala-2.13/classes ...
  [info] Fast optimizing .../workbench-example-app/target/scala-2.13/example-fastopt.js
  [success] Total time: 4 s, completed 28 mai 2020 17:27:23
  [info] 1. Monitoring source files for workbench-example-app/fastOptJS...
  [info]    Press <enter> to interrupt or '?' for more options.

@p
  The line @code{Monitoring source files...} is telling you that your Scala.js program is ready! Now, when you go to the web URL @code{http://localhost:12345/target/scala-2.13/classes/index-dev.html} in your browser, you should see the following:

  @img(src:="images/Hello World.png", maxWidth:="100%")

@p
  Congratulations, you just built and ran your first Scala.js application! If something here does not happen as expected, it means that one of the steps did not complete successfully. Make sure you can get this working before you proceed onward.

@sect{Opening up the Project}

  @p
    The next thing to do once you have the project built and running in your browser is to load it into your editor. Both IntelliJ and VS Code should let you import the Scala.js project without any hassle. Opening it and navigating to @code{ScalaJSExample.scala} would look like this:

  @img(src:="images/IntelliJ Hello.png", maxWidth:="100%")

  @p
    Let's try changing one line to change the background fill from black to white:

  @hl.diff
    - ctx.fillStyle = "black"
    + ctx.fillStyle = "white"

  @p
    Because we started @code{sbt ~fastOptJS} with the @code{~} prefix earlier, it should pick up the change and automatically recompile. The example project is set up to automatically refresh the page when recompilation is complete.

  @img(src:="images/Hello World White.png", maxWidth:="100%")

  @p
    If you open up your browser's developer console, you'll see that the SBT log output is being mirrored there:

  @img(src:="images/Hello World Console.png", maxWidth:="100%")

  @p
    Apart from the sbt log output (which is handled by Workbench) any @hl.scala{println}s in your Scala.js code will also end up in the browser console (the @code{main} you see in the console is printed inside the Scala.js application, see if you can find it!) and so will the stack traces for any thrown exceptions.

@sect{The Application Code}

  @p
    We've downloaded, compiled, ran, and made changes to our first Scala.js application. Let's now take a closer look at the code that we just ran:
  @val example = cloneRoot/"workbench-example-app"/'src/'main/'scala/'example
  @hl.ref(example/"ScalaJSExample.scala")

  @p
    It's a good chunk of code, though not a huge amount. To someone who didn't know about Scala.js, they would just think it's normal Scala, albeit with this unusual @hl.scala{dom} library and a few weird annotations. Let's pick it apart starting from the top:

  @hl.ref(example/"ScalaJSExample.scala", "case class Point", "@JSExport")

  @p
    Here we are defining a @hl.scala{Point} case class which represents a X/Y position, with some basic operators defined on it. This is done mostly for convenience later on, when we want to manipulate these two-dimensional points. Scala.js is Scala, and supports the entirety of the Scala language. @hl.scala{Point} here behaves identically as it would if you had run Scala on the JVM.

  @hl.ref(example/"ScalaJSExample.scala", "@JSExport", "val ctx")

  @p
    The @hl.scala("@JSExportTopLevel") and @hl.scala("@JSExport") annotations are used to tell Scala.js that you want this object and its main method to be visible and callable from JavaScript. By default, Scala.js does not expose classes and methods to external JavaScript code. There are many reasons for that, but perhaps the most compelling is that it allows Scala.js to perform @sect.ref("Fast Optimization", "dead code elimination") and remove any methods or classes which are not used, among many other optimizations. This is done to keep the compiled executables at a reasonable size, since most projects use only a small fraction of e.g. the standard library. In addition, classes and methods are mangled in the generated code, so that they cannot clash with non-compiler-generated code by default. The export annotations not only tell Scala.js that the @hl.scala{ScalaJSExample} object and its @hl.scala{def main} method are entry points to the program, which must not be removed, but also to provide access to them under non-mangled names. In this case, we are going to call this method from JavaScript to start the Scala.js program.

  @p
    Apart from this annotation, @hl.scala{ScalaJSExample} is just a normal Scala @hl.scala{object}, and behaves like one in every way. Note that the main method in this case takes a @lnk.dom.html.Canvas: your exported methods can have any signature, with arbitrary arity or types for parameters or the return value. This is in contrast to the main method on the JVM which always takes an @hl.scala{Array[String]} and returns @hl.scala{Unit}. In fact, there's nothing special about this method at all! It's like any other exported method, we just happen to attribute it the "main" entry point. It is entirely possible to define multiple exported classes and methods, and build a "library" using Scala.js of methods that are intended for external JavaScript to use.

  @hl.ref(example/"ScalaJSExample.scala", "val ctx", "var count")

  @p
    Here we are retrieving a @lnk.dom.CanvasRenderingContext2D which we actually use to draw on the canvas.  The @hl.scala{canvas} parameter is passed from the calling JavaScript code.

  @p
    We need to perform the @hl.scala{asInstanceOf} call because depending on what you pass to @hl.scala{getContext}, you could be returned elements and contexts of different types. Hence we need to tell the compiler explicitly that we're expecting a @lnk.dom.html.Canvas and @lnk.dom.CanvasRenderingContext2D back from these methods for the strings we passed in.

  @p
    Note how the @lnk.dom.html.Canvas comes from the @hl.scala{html} namespace, while the @lnk.dom.CanvasRenderingContext2D comes from the @hl.scala{dom} namespace. Traditionally, these types are imported via their qualified names: e.g. @hl.scala{html.Canvas} rather than just @hl.scala{Canvas}.

  @p
    In general, @lnk("scala-js-dom", "https://scala-js.github.io/scala-js-dom/") provides @hl.scala{org.scalajs.dom.html} to access the HTML element types of the browser, an @hl.scala{org.scalajs.dom} to access other things. There are a number of other namespaces (@hl.scala{dom.svg}, @hl.scala{dom.idb}, etc.) accessible inside @hl.scala{org.scalajs.dom}: read the @lnk("scala-js-dom docs", "https://scala-js.github.io/scala-js-dom/") to learn more.

  @hl.ref(example/"ScalaJSExample.scala", "def run", "dom.window.setInterval")

  @p
    This is the part of the Scala.js program which does the real work. It runs 10 iterations of a @lnk("small algorithm", "https://en.wikipedia.org/wiki/Sierpinski_triangle#Chaos_game") that generates a Sierpinski Triangle point-by-point. The steps, as described by the linked article, are roughly:

  @ul
    @li
      Pick a random corner of the large-triangle
    @li
      Move your current-position @hl.scala{p} halfway between its current location and that corner
    @li
      Draw a dot
    @li
      Repeat

  @p
    In this example, the triangle is hard-coded to be 255 pixels high by 255 pixels wide, and some math is done to pick a color for each dot which will give the triangle a pretty gradient.

  @hl.ref(example/"ScalaJSExample.scala", "dom.window.setInterval")

  @p

    Now this is the call that actually does the useful work. All this method does is call @hl.scala{dom.window.setInterval}, which tells the browser to run the @hl.scala{run} method every 50 milliseconds. As mentioned earlier, the @hl.scala{dom.*} methods are simply facades to their native JavaScript equivalents, and @hl.scala{dom.window.setInterval} is @lnk("no different", "https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers.setInterval").

@sect{The Project Code}

  @p
    We've already taken a look at the application code for a simple, self-contained Scala.js application, but this application is not @i{entirely} self contained. It's wrapped in a small SBT project that sets up the necessary dependencies and infrastructure for this application to work.

  @sect{project/plugins.sbt}
    @hl.ref(cloneRoot/"workbench-example-app"/'project/"build.sbt")

    @p
      This is the list of SBT plugins used by this small example application. There are two of them: the Scala.js plugin (which contains the Scala.js compiler and other things, e.g. tasks such as @code{fastOptJS}) and the @lnk("Workbench", "https://github.com/lihaoyi/workbench") plugin, which is used to provide the auto-reload-on-change behavior and the forwarding of SBT log messages to the browser console.

    @p
      Of the two, only the Scala.js plugin is really necessary. The Workbench plugin is a convenience that makes development easier. Without it you'd need to keep a terminal open to view the SBT log, and manually refresh the page when compilation finished. Not the end of the world.


  @sect{build.sbt}
    @hl.ref(cloneRoot/"workbench-example-app"/"build.sbt")

    @p
      The @code{build.sbt} project file for this application is similarly unremarkable: It includes the settings for the two SBT plugins we saw earlier, as well as boilerplate @hl.scala{name}/@hl.scala{version}/@hl.scala{scalaVersion} values common to all projects.

    @p
      Of interest is the @hl.scala{libraryDependencies}. In Scala-JVM, this key is used to declare dependencies on libraries from Maven Central, so you can use them in your Scala-JVM projects. In Scala.js, the same key is used to declare dependencies on libraries so you can use them in your Scala.js projects! Re-usable libraries can be built and published with Scala.js just as you do on Scala-JVM, and here we make use of one which provides the typed facades with which we used to access the DOM in the application code.

  @sect{src/main/resources/index-dev.html}
    @hl.ref(cloneRoot/"workbench-example-app"/'src/'main/'resources/"index-dev.html")

    @p
      This is the HTML page which our toy app lives in, and the same page that we have so far been using to view the app in the browser. To anyone who has used HTML, most of it is probably familiar. Things of note are the @hl.xml{<script>} tags: @hl.scala{"../example-fastopt.js"} Is the executable blob spat out by the compiler, which we need to include in the HTML page for anything to happen. This is where the results of your compiled Scala code appear. @hl.scala{"workbench.js"} is the client for the Workbench plugin that connects to SBT, reloads the browser and forwards log messages to the browser console.

    @p
      The @hl.scala{ScalaJSExample.main()} call is what kicks off the Scala.js application and starts its execution. While it is possible to configure Scala.js to run a main method automatically, in this example we chose to use exports instead, with an explicit call from JavaScript. In this case, we're passing the canvas object (attained using @hl.js{getElementById}) to it so it knows where to do its thing.

    @p
      @hl.scala{document.getElementById} is the exact same API that's used in normal JavaScript, as documented @lnk("here", "https://developer.mozilla.org/en-US/docs/Web/API/document.getElementById"). In fact, the entire @hl.scala{org.scalajs.dom} namespace (imported at the top of the file) comprises statically typed facades for the JavaScript APIs provided by the browser.

    @p
      Lastly, only @hl.scala("@JSExport")ed objects and methods can be called from JavaScript. Also, although this example only exports the @hl.scala{main} method which is called once, there is nothing stopping you from exporting any number of objects and methods and calling them whenever you need to. In this way, you can easily make a Scala.js "library" which is available to external JavaScript as an API.

@sect{Publishing}
  @p
    The last thing that we'll do with our toy application is to publish it. If you look in the @code{target/scala-2.13} folder, you'll see the output of everything we've done so far:

  @hl.sh
    target/scala-2.13
    ├── classes
    │   ├── example
    │   │   ├── Point$.class
    │   │   ├── Point$.sjsir
    │   │   ├── Point.class
    │   │   ├── Point.sjsir
    │   │   ├── ScalaJSExample$$anonfun$main$3.class
    │   │   ├── ScalaJSExample$.class
    │   │   ├── ScalaJSExample$.sjsir
    │   │   ├── ScalaJSExample.class
    │   │   └── ScalaJSExample.sjsir
    │   ├── index-dev.html
    │   └── index-opt.html
    ├── example-fastopt.js
    └── example-fastopt.js.map

  @p
    All the @code{.class} and @code{.sjsir} files are the direct output of the Scala.js compiler, and aren't necessary to actually run the application. The only two files necessary are @code{index-dev.html} and @code{example-fastopt.js}. You may recognize @code{index-dev.html} as the file that we were navigating to in the browser earlier.

  @p
    These two files can be extracted and published as-is: you can put them on @lnk("Github-Pages", "https://pages.github.com/"), @lnk("Amazon Web Services", "https://docs.aws.amazon.com/gettingstarted/latest/swh/website-hosting-intro.html"), or a hundred other places. However, one thing of note is the fact that the generated JavaScript file is quite large:

  @hl.sh
    $ du -h target/scala-2.13/example-fastopt.js
    364K    target/scala-2.13/example-fastopt.js

  @p
    364 Kilobytes for a hello world app! That is clearly too large. If you examine the contents of the file, you'll see that your code has been translated into something like this:

  @hl.js
    let i = 0;
    while (true) {
      if ((((count$1.sr_IntRef__f_elem % 3000) | 0) === 0)) {
        $p_Lexample_ScalaJSExample$__clear$1__Lorg_scalajs_dom_raw_CanvasRenderingContext2D__V($thiz, ctx$1)
      };
      count$1.sr_IntRef__f_elem = ((1 + count$1.sr_IntRef__f_elem) | 0);
      const $$x1 = $as_Lexample_Point(p$1.sr_ObjectRef__f_elem);
      const this$4 = $m_s_util_Random$();
      p$1.sr_ObjectRef__f_elem = $$x1.$plus__Lexample_Point__Lexample_Point($as_Lexample_Point(corners$1.apply__I__O(this$4.s_util_Random__f_self.nextInt__I__I(3)))).$div__I__Lexample_Point(2);
      const height = (512.0 / ((255 + $as_Lexample_Point(p$1.sr_ObjectRef__f_elem).Lexample_Point__f_y) | 0));
      const r = $doubleToInt(($as_Lexample_Point(p$1.sr_ObjectRef__f_elem).Lexample_Point__f_x * height));
      const g = $doubleToInt((((255 - $as_Lexample_Point(p$1.sr_ObjectRef__f_elem).Lexample_Point__f_x) | 0) * height));
      ...
      if ((i === 9)) {
        break
      };
      i = ((1 + i) | 0)
    }

  @p
    As you can see, this code is still very verbose, with lots of unnecessarily long identifiers such as @hl.js{$plus__Lexample_Point__Lexample_Point} in it. This is because we've only performed the @sect.ref{Fast Optimization} on this file, to try and keep the time taken to edit -> compile while developing reasonably short.

  @sect{Optimization}
    @p
      If we're planning on publishing the app for real, we can run the @sect.ref{Full Optimization}. This takes several seconds longer than the @sect.ref{Fast Optimization}, but results in a significantly smaller and leaner output file @code{example-opt.js}.

    @hl.sh
      $ du -h target/scala-2.13/example-opt.js
      76K     target/scala-2.13/example-opt.js

    @p
      76 Kilobytes! Better. Not great, though! In general, Scala.js does not produce tiny executables, although the output size of the compiled executables is dropping all the time. If you look inside that file, you'll see all of the long identifiers have been replaced by short ones by the @lnk("Google Closure Compiler", "https://developers.google.com/closure/compiler/").

    @hl.js("""
      let t=0;for(;;){if(0===(e.ic%3E3|0)){var m=h;m.fillStyle="white";m.fillRect(0,0,255,255)}
      e.ic=1+e.ic|0;const u=f.Ea;wb||(wb=new xb);m=g.k(yb());m=new pb(u.Fa+m.Fa|0,u.Ga+m.Ga|0);
      f.Ea=new pb(m.Fa/2|0,m.Ga/2|0);m=512/(255+f.Ea.Ga|0);
      h.fillStyle="rgb("+Ga((255-f.Ea.Fa|0)*m)+", "+Ga(f.Ea.Fa*m)+", "+f.Ea.Ga+")";
      h.fillRect(f.Ea.Fa,f.Ea.Ga,1,1);if(9===t)break;t=1+t|0}
    """)

    @p
      These files are basically unreadable, but nonetheless behave the same as the @code{-fastopt} versions. Try it out by opening the @code{index-opt.html} file in the @code{target/scala-2.13/classes} directory with your browser: you should see the thing as when opening @code{index-dev}, except it will be pulling in the fully-optmized version of your application.

    @p
      This means you can develop and debug using @code{fastOptJS}, and only spend the extra time (and increased debugging difficulty) on the @code{fullOptJS} version just as you're going to publish it, with the assurance that although the code is much more compact, its behavior will not change.

  @sect{Blob Size}
    @p
      Even the fully-optimized version of our toy Scala.js app are pretty large. There are some factors that mitigate the large size of these executables:

    @ul
      @li
        A large portion of this 76k is the Scala standard library, and so the size of the compiled blob does not grow that fast as your program grows. For example, while this ~50 line application is 76k, the size of larger applications does not grow linearly with the source code.
      @li
        This size is pre-@lnk("gzip", "https://en.wikipedia.org/wiki/Gzip"), and most webservers serve their contents compressed via gzip to reduce the download size. Gzip cuts the actual download size down to 22k, which is more acceptable.
      @li
        You will likely have other portions of the page that are of similar size: e.g. @lnk("JQuery", "https://jquery.com/") is extremely popular, and weights in at a comparable 32kb minified and gzipped, while @lnk("React.js", "https://facebook.github.io/react/downloads.html") weighs in at a cool 150kb gzipped. Scala.js arguably provides more than either of these libraries.

    @p
      Regardless, the size of these executables can always be improved. If you want to read more about this, check out the section on @sect.ref("The Compilation Pipeline") to learn about what Scala.js currently does to crunch the executables down.

  @hr

  @p
    In general, all the output of the Scala.js compiler is bundled up into the @code{example-fastopt.js} and @code{example-opt.js} files. As a first approximation, these files can be included directly on a HTML page (as we have here, with @code{index-dev.html} and @code{index-opt.html}) and published together as a working web app. Even zipping them up and emailing them to a friend is sufficient to give someone a working, live version of your hard work!

  @p
    More advanced users would want to integrate them into their build process or serve them from a web server, all of which is entirely possible. You just need to run the Scala.js compiler and place the output @code{.js} file somewhere your web server can pick it up, e.g. in some static-resource folder. We cover an example setup of this with a Scala webserver in our chapter @sect.ref("Integrating Client-Server").

@sect{Recap}

  @p
    If you've made it this far, you've downloaded, made modifications to, and published a toy Scala.js application. At the same time, we've gone over many of the key concepts in the Scala.js development process:

  @ul
    @li
      Getting a Scala.js application
    @li
      Building it and seeing it work in the browser
    @li
      Made modifications to it to see it update
    @li
      Examined the source code to try and understand what it's doing
    @li
      Examined the output code, at two levels of optimization, to see how the Scala.js compiler works
    @li
      Packaged the application in a form that can be easily published online

  @p
    Hopefully this gives a good sense of the workflow involved in developing a Scala.js application end-to-end, as well as a feel for the magic involved in the compilation process. Nevertheless, we have barely written any Scala.js code itself!

  @p
    Since you have a working development environment set up, you should take this time to poke around what you can do with our small Sierpinski-Triangle drawing app. Possible exercises include:

  @ul
    @li
      JavaScript includes APIs for @lnk("getting the size of the window", "https://stackoverflow.com/questions/1248081/get-the-browser-viewport-dimensions-with-javascript") and @lnk("changing the size of a canvas", "https://stackoverflow.com/questions/9251480/set-canvas-size-using-javascript"). These JavaScript APIs are available in Scala.js, and we've already used some of them in the course of this example. Try making the Canvas full-screen, and re-positioning the corners of the triangle to match.
    @li
      The @lnk.dom.CanvasRenderingContext2D has a bunch of methods on it that can be used to draw things. Here we only draw 1x1 rectangles to put points on the canvas; try modifying the code to make it draw something else.
    @li
      We've looked at the @code{master} branch of @code{workbench-example-app}, but this project also has several other branches showing off different facets of Scala.js: @lnk("dodge-the-dots", "https://github.com/lihaoyi/workbench-example-app/tree/dodge-the-dots") and @lnk("space-invaders", "https://github.com/lihaoyi/workbench-example-app/tree/space-invaders") are both interesting branches worth playing with as a beginner. Check them out!
    @li
      Try publishing the output code somewhere. You only need @code{example-opt.js} and @code{index-opt.html}; try putting them somewhere online where the world can see it.

  @p
    When you're done poking around our toy web application, read on to the next chapter, where we will explore making something more meaty using the Scala.js toolchain!
